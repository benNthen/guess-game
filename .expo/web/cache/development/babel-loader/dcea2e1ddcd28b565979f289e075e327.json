{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useFonts } from 'expo-font';\nimport AppLoading from 'expo-app-loading';\nimport { StatusBar } from 'expo-status-bar';\nimport StartMenuScreen from \"./screens/StartMenuScreen\";\nimport GameScreen from \"./screens/GameScreen\";\nimport GameOverScreen from \"./screens/GameOverScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    userNumber = _useState2[0],\n    setUserNumber = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    gameIsOver = _useState4[0],\n    setGameIsOver = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    guessRounds = _useState6[0],\n    setGuessRounds = _useState6[1];\n  var _useFonts = useFonts({\n      'open-sans': require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n      'open-sans-bold': require(\"./assets/fonts/OpenSans-Bold.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  if (!fontsLoaded) {\n    return _jsx(AppLoading, {});\n  }\n  function choosenNumberHandler(chosenNumber) {\n    setUserNumber(chosenNumber);\n    setGameIsOver(false);\n  }\n  function gameOverHandler(numberOfRounds) {\n    setGameIsOver(true);\n    setGuessRounds(numberOfRounds);\n  }\n  function startNewGameHandler() {\n    setUserNumber(null);\n    setGuessRounds(0);\n  }\n  var screen = _jsx(StartMenuScreen, {\n    onChooseNumber: choosenNumberHandler\n  });\n  if (userNumber) {\n    screen = _jsx(GameScreen, {\n      userNumber: userNumber,\n      onGameOver: gameOverHandler\n    });\n  }\n  if (gameIsOver && userNumber) {\n    screen = _jsx(GameOverScreen, {\n      userNumber: userNumber,\n      roundsNumber: guessRounds,\n      onStartNewGame: startNewGameHandler\n    });\n  }\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      style: \"light\"\n    }), _jsx(LinearGradient, {\n      colors: ['rgb(206,26,15)', 'rgb(255,255,255)', 'rgb(15,17,206)'],\n      style: styles.rootScreen,\n      children: _jsx(ImageBackground, {\n        source: require(\"./assets/images/background.jpg\"),\n        resizeMode: \"cover\",\n        style: styles.rootScreen,\n        imageStyle: styles.backgroundImage,\n        children: _jsx(SafeAreaView, {\n          style: styles.rootScreen,\n          children: screen\n        })\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  rootScreen: {\n    flex: 1\n  },\n  backgroundImage: {\n    opacity: 0.15\n  }\n});","map":{"version":3,"names":["useState","LinearGradient","useFonts","AppLoading","StatusBar","StartMenuScreen","GameScreen","GameOverScreen","App","userNumber","setUserNumber","gameIsOver","setGameIsOver","guessRounds","setGuessRounds","require","fontsLoaded","choosenNumberHandler","chosenNumber","gameOverHandler","numberOfRounds","startNewGameHandler","screen","styles","rootScreen","backgroundImage","StyleSheet","create","flex","opacity"],"sources":["C:/Users/bened/Desktop/ReactProjects/React Native/guess-game/App.js"],"sourcesContent":["import { useState } from 'react';\nimport { StyleSheet, ImageBackground, SafeAreaView } from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useFonts } from 'expo-font';\nimport AppLoading from 'expo-app-loading';\nimport { StatusBar } from 'expo-status-bar';\n\nimport StartMenuScreen  from './screens/StartMenuScreen';\nimport GameScreen from './screens/GameScreen';\nimport GameOverScreen from './screens/GameOverScreen';\n\nexport default function App() {\n  const[userNumber, setUserNumber] = useState();\n  const[gameIsOver, setGameIsOver] = useState(true);\n  const[guessRounds, setGuessRounds] = useState(0);\n\n  const [fontsLoaded] = useFonts({\n    'open-sans': require('./assets/fonts/OpenSans-Regular.ttf'),\n    'open-sans-bold': require('./assets/fonts/OpenSans-Bold.ttf'),\n  });\n\n  if (!fontsLoaded) {\n    return <AppLoading />;\n  }\n\n  function choosenNumberHandler(chosenNumber) {\n    setUserNumber(chosenNumber);\n    setGameIsOver(false);\n  }\n\n  function gameOverHandler(numberOfRounds) {\n    setGameIsOver(true);\n    setGuessRounds(numberOfRounds);\n  }\n\n  function startNewGameHandler() { //set these states once user pressed New Game\n    setUserNumber(null);\n    setGuessRounds(0);\n  }\n\n  let screen = <StartMenuScreen onChooseNumber={choosenNumberHandler}/>;\n\n  if (userNumber) {\n    screen = (<GameScreen userNumber={userNumber} onGameOver={gameOverHandler} />\n    );\n  }\n\n  if (gameIsOver && userNumber) { //shows Game Over screen if condition is true\n    screen = (\n      <GameOverScreen \n              userNumber={userNumber} \n              roundsNumber={guessRounds} \n              onStartNewGame={startNewGameHandler} \n              />\n    );\n  }\n\n  return (\n    <>\n      <StatusBar style=\"light\"/>\n      <LinearGradient \n        colors={['rgb(206,26,15)', 'rgb(255,255,255)', 'rgb(15,17,206)']} \n        style={styles.rootScreen}\n      >\n        <ImageBackground \n          source={require('./assets/images/background.jpg')} \n          resizeMode=\"cover\"\n          style={styles.rootScreen}\n          imageStyle={styles.backgroundImage}\n        >\n          <SafeAreaView style={styles.rootScreen}>{screen}</SafeAreaView>\n        </ImageBackground>\n      </LinearGradient>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  rootScreen: {\n    flex: 1\n  },\n  backgroundImage: {\n    opacity: 0.15\n  }\n});\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAAA;AAEjC,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,QAAQ,QAAQ,WAAW;AACpC,OAAOC,UAAU,MAAM,kBAAkB;AACzC,SAASC,SAAS,QAAQ,iBAAiB;AAE3C,OAAOC,eAAe;AACtB,OAAOC,UAAU;AACjB,OAAOC,cAAc;AAAiC;AAAA;AAAA;AAEtD,eAAe,SAASC,GAAG,GAAG;EAC5B,gBAAmCR,QAAQ,EAAE;IAAA;IAAvCS,UAAU;IAAEC,aAAa;EAC/B,iBAAmCV,QAAQ,CAAC,IAAI,CAAC;IAAA;IAA3CW,UAAU;IAAEC,aAAa;EAC/B,iBAAqCZ,QAAQ,CAAC,CAAC,CAAC;IAAA;IAA1Ca,WAAW;IAAEC,cAAc;EAEjC,gBAAsBZ,QAAQ,CAAC;MAC7B,WAAW,EAAEa,OAAO,uCAAuC;MAC3D,gBAAgB,EAAEA,OAAO;IAC3B,CAAC,CAAC;IAAA;IAHKC,WAAW;EAKlB,IAAI,CAACA,WAAW,EAAE;IAChB,OAAO,KAAC,UAAU,KAAG;EACvB;EAEA,SAASC,oBAAoB,CAACC,YAAY,EAAE;IAC1CR,aAAa,CAACQ,YAAY,CAAC;IAC3BN,aAAa,CAAC,KAAK,CAAC;EACtB;EAEA,SAASO,eAAe,CAACC,cAAc,EAAE;IACvCR,aAAa,CAAC,IAAI,CAAC;IACnBE,cAAc,CAACM,cAAc,CAAC;EAChC;EAEA,SAASC,mBAAmB,GAAG;IAC7BX,aAAa,CAAC,IAAI,CAAC;IACnBI,cAAc,CAAC,CAAC,CAAC;EACnB;EAEA,IAAIQ,MAAM,GAAG,KAAC,eAAe;IAAC,cAAc,EAAEL;EAAqB,EAAE;EAErE,IAAIR,UAAU,EAAE;IACda,MAAM,GAAI,KAAC,UAAU;MAAC,UAAU,EAAEb,UAAW;MAAC,UAAU,EAAEU;IAAgB,EACzE;EACH;EAEA,IAAIR,UAAU,IAAIF,UAAU,EAAE;IAC5Ba,MAAM,GACJ,KAAC,cAAc;MACP,UAAU,EAAEb,UAAW;MACvB,YAAY,EAAEI,WAAY;MAC1B,cAAc,EAAEQ;IAAoB,EAE7C;EACH;EAEA,OACE;IAAA,WACE,KAAC,SAAS;MAAC,KAAK,EAAC;IAAO,EAAE,EAC1B,KAAC,cAAc;MACb,MAAM,EAAE,CAAC,gBAAgB,EAAE,kBAAkB,EAAE,gBAAgB,CAAE;MACjE,KAAK,EAAEE,MAAM,CAACC,UAAW;MAAA,UAEzB,KAAC,eAAe;QACd,MAAM,EAAET,OAAO,kCAAmC;QAClD,UAAU,EAAC,OAAO;QAClB,KAAK,EAAEQ,MAAM,CAACC,UAAW;QACzB,UAAU,EAAED,MAAM,CAACE,eAAgB;QAAA,UAEnC,KAAC,YAAY;UAAC,KAAK,EAAEF,MAAM,CAACC,UAAW;UAAA,UAAEF;QAAM;MAAgB;IAC/C,EACH;EAAA,EAChB;AAEP;AAEA,IAAMC,MAAM,GAAGG,UAAU,CAACC,MAAM,CAAC;EAC/BH,UAAU,EAAE;IACVI,IAAI,EAAE;EACR,CAAC;EACDH,eAAe,EAAE;IACfI,OAAO,EAAE;EACX;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}