{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { Ionicons } from '@expo/vector-icons';\nimport NumberContainer from \"../components/game/NumberContainer\";\nimport Card from \"../components/ui/Card\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Title from \"../components/ui/Title\";\nimport QuestionText from \"../components/ui/QuestionText\";\nimport GuessLogEntry from \"../components/game/GuessLogEntry\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nfunction generateRandomBetween(min, max, exclude) {\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n}\nvar minBoundary = 1;\nvar maxBoundary = 100;\nfunction GameScreen(_ref) {\n  var userNumber = _ref.userNumber,\n    onGameOver = _ref.onGameOver;\n  var initialGuess = generateRandomBetween(1, 100, userNumber);\n  var _useState = useState(initialGuess),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentGuess = _useState2[0],\n    setCurrentGuess = _useState2[1];\n  var _useState3 = useState([initialGuess]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    guessRounds = _useState4[0],\n    setGuessRounds = _useState4[1];\n  var _useWindowDimensions = useWindowDimensions(),\n    width = _useWindowDimensions.width,\n    height = _useWindowDimensions.height;\n  useEffect(function () {\n    if (currentGuess === userNumber) {\n      onGameOver(guessRounds.length);\n    }\n  }, [currentGuess, userNumber, onGameOver]);\n  useEffect(function () {\n    minBoundary = 1;\n    maxBoundary = 100;\n  }, []);\n  function nextGuessHandler(direction) {\n    if (direction === 'lower' && currentGuess < userNumber || direction === 'greater' && currentGuess > userNumber) {\n      Alert.alert(\"Don't lie!\", 'You know that this is wrong...', [{\n        text: 'Sorry!',\n        style: 'cancel'\n      }]);\n      return;\n    }\n    if (direction === 'lower') {\n      maxBoundary = currentGuess - 1;\n      var _newRndNumber = generateRandomBetween(minBoundary, maxBoundary, currentGuess);\n    } else {\n      minBoundary = currentGuess + 1;\n    }\n    console.log(minBoundary, maxBoundary);\n    var newRndNumber = generateRandomBetween(minBoundary, maxBoundary, currentGuess);\n    setCurrentGuess(newRndNumber);\n    setGuessRounds(function (prevGuessRounds) {\n      return [newRndNumber].concat(_toConsumableArray(prevGuessRounds));\n    });\n  }\n  var guessRoundsListLength = guessRounds.length;\n  var content = _jsxs(_Fragment, {\n    children: [_jsx(NumberContainer, {\n      children: currentGuess\n    }), _jsxs(Card, {\n      children: [_jsx(QuestionText, {\n        style: styles.instructionText,\n        children: \"Higher or Lower?\"\n      }), _jsxs(View, {\n        style: styles.buttonsContainer,\n        children: [_jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(this, 'lower'),\n            children: _jsx(Ionicons, {\n              name: \"md-remove\",\n              size: 24,\n              color: \"white\"\n            })\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(this, 'greater'),\n            children: _jsx(Ionicons, {\n              name: \"md-add\",\n              size: 24,\n              color: \"white\"\n            })\n          })\n        })]\n      })]\n    })]\n  });\n  if (width > 500) {\n    content = _jsx(_Fragment, {\n      children: _jsxs(View, {\n        style: styles.buttonWideContainer,\n        children: [_jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(this, 'lower'),\n            children: _jsx(Ionicons, {\n              name: \"md-remove\",\n              size: 24,\n              color: \"white\"\n            })\n          })\n        }), _jsx(NumberContainer, {\n          children: currentGuess\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(this, 'greater'),\n            children: _jsx(Ionicons, {\n              name: \"md-add\",\n              size: 24,\n              color: \"white\"\n            })\n          })\n        })]\n      })\n    });\n  }\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Title, {\n      children: \"Opponent's Guess is..\"\n    }), content, _jsx(View, {\n      style: styles.listContainer,\n      children: _jsx(FlatList, {\n        data: guessRounds,\n        renderItem: function renderItem(itemData) {\n          return _jsx(GuessLogEntry, {\n            roundNumber: guessRoundsListLength - itemData.index,\n            guess: itemData.item\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item;\n        }\n      })\n    })]\n  });\n}\nexport default GameScreen;\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 24,\n    alignItems: 'center'\n  },\n  instructionText: {\n    marginBottom: 12\n  },\n  buttonsContainer: {\n    flexDirection: 'row'\n  },\n  buttonContainer: {\n    flex: 1\n  },\n  buttonWideContainer: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  listContainer: {\n    flex: 1,\n    padding: 16\n  }\n});","map":{"version":3,"names":["useState","useEffect","Ionicons","NumberContainer","Card","PrimaryButton","Title","QuestionText","GuessLogEntry","generateRandomBetween","min","max","exclude","rndNum","Math","floor","random","minBoundary","maxBoundary","GameScreen","userNumber","onGameOver","initialGuess","currentGuess","setCurrentGuess","guessRounds","setGuessRounds","useWindowDimensions","width","height","length","nextGuessHandler","direction","Alert","alert","text","style","newRndNumber","console","log","prevGuessRounds","guessRoundsListLength","content","styles","instructionText","buttonsContainer","buttonContainer","bind","buttonWideContainer","screen","listContainer","itemData","index","item","StyleSheet","create","flex","padding","alignItems","marginBottom","flexDirection"],"sources":["C:/Users/bened/Desktop/ReactProjects/React Native/guess-game/screens/GameScreen.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { View, StyleSheet, Alert, FlatList, useWindowDimensions } from 'react-native';\r\nimport { Ionicons } from '@expo/vector-icons';\r\n\r\nimport NumberContainer from '../components/game/NumberContainer';\r\nimport Card from '../components/ui/Card';\r\nimport PrimaryButton from '../components/ui/PrimaryButton';\r\nimport Title from '../components/ui/Title';\r\nimport QuestionText from '../components/ui/QuestionText';\r\nimport GuessLogEntry from '../components/game/GuessLogEntry';\r\n\r\nfunction generateRandomBetween(min, max, exclude) {\r\n\r\n  \r\n\r\n  const rndNum = Math.floor(Math.random() * (max - min)) + min;\r\n\r\n  if (rndNum === exclude) {\r\n    return generateRandomBetween(min, max, exclude);\r\n  } else {\r\n    return rndNum;\r\n  }\r\n}\r\n\r\nlet minBoundary = 1;\r\nlet maxBoundary = 100;\r\n\r\nfunction GameScreen ({ userNumber, onGameOver }) {\r\n  const initialGuess = generateRandomBetween( 1, 100, userNumber);\r\n  const [currentGuess, setCurrentGuess] = useState(initialGuess);\r\n  const [guessRounds, setGuessRounds] = useState([initialGuess]);\r\n  const { width, height } = useWindowDimensions();\r\n\r\n  useEffect(() => {\r\n    if (currentGuess === userNumber) {\r\n      onGameOver(guessRounds.length);\r\n    }\r\n  }, [currentGuess, userNumber, onGameOver]);\r\n\r\n  useEffect(() => {\r\n    minBoundary = 1;\r\n    maxBoundary = 100;\r\n  }, []);\r\n\r\n  function nextGuessHandler(direction) { \r\n    // direction => 'lower', 'greater'\r\n    if (\r\n      (direction === 'lower' && currentGuess < userNumber) || \r\n      (direction === 'greater' && currentGuess > userNumber) \r\n    ) {\r\n      Alert.alert(\"Don't lie!\", 'You know that this is wrong...', \r\n        [{text: 'Sorry!', style: 'cancel'},\r\n      ]);\r\n      return;\r\n    }\r\n\r\n    if (direction === 'lower') {\r\n      maxBoundary = currentGuess - 1;\r\n      const newRndNumber = generateRandomBetween(minBoundary, maxBoundary, currentGuess);\r\n    } else {\r\n      minBoundary = currentGuess + 1;\r\n    }\r\n    console.log(minBoundary, maxBoundary);\r\n    const newRndNumber = generateRandomBetween(\r\n      minBoundary, \r\n      maxBoundary, \r\n      currentGuess\r\n    );\r\n    setCurrentGuess(newRndNumber);\r\n    setGuessRounds(prevGuessRounds => [newRndNumber,...prevGuessRounds]);\r\n  }\r\n    const guessRoundsListLength = guessRounds.length;\r\n\r\n    let content = (\r\n    <>\r\n      <NumberContainer>{currentGuess}</NumberContainer>\r\n      <Card>\r\n        <QuestionText style={styles.instructionText}>\r\n          Higher or Lower?\r\n        </QuestionText>\r\n        <View style={styles.buttonsContainer}>\r\n            <View style={styles.buttonContainer}>\r\n              <PrimaryButton onPress={nextGuessHandler.bind(this, 'lower')}>\r\n                <Ionicons name=\"md-remove\" size={24} color=\"white\" />\r\n              </PrimaryButton>\r\n            </View>\r\n            <View style={styles.buttonContainer}>\r\n              <PrimaryButton onPress={nextGuessHandler.bind(this, 'greater')}>\r\n                <Ionicons name=\"md-add\" size={24} color=\"white\" />\r\n              </PrimaryButton>\r\n            </View>\r\n        </View>\r\n      </Card>\r\n      </>\r\n    );\r\n\r\n    if (width > 500) {\r\n      content = (\r\n        <>\r\n          <View style={styles.buttonWideContainer}>\r\n            <View style={styles.buttonContainer}>\r\n              <PrimaryButton onPress={nextGuessHandler.bind(this, 'lower')}>\r\n                <Ionicons name=\"md-remove\" size={24} color=\"white\" />\r\n              </PrimaryButton>\r\n            </View>\r\n            <NumberContainer>{currentGuess}</NumberContainer>\r\n            <View style={styles.buttonContainer}>\r\n              <PrimaryButton onPress={nextGuessHandler.bind(this, 'greater')}>\r\n                <Ionicons name=\"md-add\" size={24} color=\"white\" />\r\n              </PrimaryButton>\r\n            </View>\r\n          </View>\r\n        </>\r\n      );\r\n    }\r\n\r\n    return (\r\n     <View style={styles.screen}>\r\n        <Title>Opponent's Guess is..</Title>\r\n        {content}\r\n        <View style={styles.listContainer}>\r\n          {/* {guessRounds.map(guessRound => <Text key={guessRound}>{guessRound}</Text>)} */}\r\n          <FlatList \r\n            data={guessRounds} \r\n            renderItem={(itemData) => (\r\n              <GuessLogEntry \r\n                roundNumber={guessRoundsListLength - itemData.index} \r\n                guess={itemData.item}\r\n              />\r\n              )}\r\n                keyExtractor={(item) => item}\r\n              />\r\n        </View>\r\n     </View>\r\n  );\r\n}\r\n\r\nexport default GameScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n    screen: {\r\n        flex: 1,\r\n        padding: 24,\r\n        alignItems: 'center',\r\n    },\r\n    instructionText: {\r\n      marginBottom: 12,\r\n    },\r\n    buttonsContainer: {\r\n      flexDirection: 'row',\r\n    },\r\n    buttonContainer: {\r\n      flex: 1,\r\n    },\r\n    buttonWideContainer: {\r\n      flexDirection: 'row',\r\n      alignItems: 'center',\r\n    },\r\n    listContainer: {\r\n      flex: 1,\r\n      padding: 16,\r\n    },\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}